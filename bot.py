import asyncio
import sqlite3
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ Railway logs)
logging.basicConfig(level=logging.INFO)

# üîπ –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway ‚Üí Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ Railway ‚Üí Variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
DB_PATH = "students.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        group_name TEXT
    )
    """)
    conn.commit()
    conn.close()

init_db()

# -----------------------------
# üîπ –ö–æ–º–∞–Ω–¥—ã
# -----------------------------

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /buy —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É.")

@dp.message(Command("add"))
async def add_student(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /add –ò–º—è –ì—Ä—É–ø–ø–∞")
        return

    name, group = parts[1], parts[2]
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO students (name, group_name) VALUES (?, ?)", (name, group))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group}!")

@dp.message(Command("list"))
async def list_students(message: Message):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, name, group_name FROM students")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer("üì≠ –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
    for r in rows:
        text += f"#{r[0]}: {r[1]} ({r[2]})\n"

    await message.answer(text)

# -----------------------------
# üîπ –û–ø–ª–∞—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å)
# -----------------------------

@dp.message(Command("buy"))
async def buy_cmd(message: Message):
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=10000)]  # 100 = 1 —Ä—É–±–ª—å/—Ç–µ–Ω–≥–µ
    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞",
        description="–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram",
        payload="subscription_payload",
        provider_token=os.getenv("PAYMENT_TOKEN", "TEST:TOKEN"),  # ‚ö†Ô∏è –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
        currency="RUB",
        prices=prices,
        start_parameter="test-subscription"
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ–∫–∞—É—Ç–∞
@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@dp.message(F.successful_payment)
async def successful_payment(message: Message):
    payment = message.successful_payment
    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n\n"
        f"–°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}\n"
        f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}"
    )

# -----------------------------
# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------------

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
