import asyncio
import aiosqlite
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, SuccessfulPaymentFilter
from aiogram.types import (
    LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, PreCheckoutQuery
)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
TOKEN = "7615768301:AAGxhDTqCzI8-4lu0oo2v0cOFKS2_x1T-8o"
ADMIN_ID = 6486579332
PAYMENT_PROVIDER_TOKEN = ""   # –ø—É—Å—Ç–æ –¥–ª—è Stars
CURRENCY = "XTR"              # Telegram Stars
# --------------------------------

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect("students.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS students (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            language_code TEXT,
            is_premium INTEGER
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            message TEXT,
            date TEXT,
            type TEXT
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS donations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount INTEGER,
            currency TEXT,
            date TEXT,
            payload TEXT
        )
        """)
        await db.commit()

# --- –ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")],
        [KeyboardButton(text="‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É")]
    ],
    resize_keyboard=True
)

# --- START ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/privacy ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "/myid ‚Äî –≤–∞—à ID\n"
        "/donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n"
        "/letter —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É",
        reply_markup=main_menu
    )

# --- HELP ---
@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "üÜò –ü–æ–º–æ—â—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/privacy ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "/myid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
        "/donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∑–≤—ë–∑–¥–∞–º–∏\n"
        "/letter —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"
    )

# --- PRIVACY ---
@dp.message(Command("privacy"))
async def privacy(message: types.Message):
    await message.answer(
        "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        "1) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—à Telegram ID, –∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "2) –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
        "3) –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
    )

# --- MYID ---
@dp.message(Command("myid"))
async def myid(message: types.Message):
    user = message.from_user
    await message.answer(
        f"üÜî –í–∞—à Telegram ID: `{user.id}`\n"
        f"üë§ Username: @{user.username or '–Ω–µ—Ç'}",
        parse_mode="Markdown"
    )

# --- DONATE ---
@dp.message(Command("donate"))
async def donate_cmd(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê 1 Star", callback_data="donate_1")],
            [InlineKeyboardButton(text="‚≠ê 5 Stars", callback_data="donate_5")],
            [InlineKeyboardButton(text="‚≠ê 10 Stars", callback_data="donate_10")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=kb)

@dp.callback_query(F.data.startswith("donate_"))
async def donate_callback(callback: types.CallbackQuery):
    stars = int(callback.data.split("_")[1])
    user = callback.from_user

    prices = [LabeledPrice(label=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî {stars} Stars", amount=stars)]

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî {stars} Stars",
        description="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞!",
        payload=f"donate_{user.id}_{int(datetime.utcnow().timestamp())}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices
    )
    await callback.answer()

# --- Pre-checkout ---
@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_q: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# --- –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ---
@dp.message(SuccessfulPaymentFilter())
async def got_payment(message: types.Message):
    pay = message.successful_payment
    user = message.from_user

    async with aiosqlite.connect("students.db") as db:
        await db.execute(
            "INSERT INTO donations (user_id, amount, currency, date, payload) VALUES (?, ?, ?, ?, ?)",
            (user.id, pay.total_amount, pay.currency, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), pay.invoice_payload)
        )
        await db.commit()

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è")
    await bot.send_message(
        ADMIN_ID,
        f"üí∞ –î–æ–Ω–∞—Ç –æ—Ç @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'} ({user.id})\n"
        f"–°—É–º–º–∞: {pay.total_amount} {pay.currency}\n"
        f"Payload: {pay.invoice_payload}"
    )

# --- LETTER ---
@dp.message(Command("letter"))
async def letter(message: types.Message):
    text = message.text.replace("/letter", "").strip()
    if not text:
        return await message.answer("‚ùå –ù–∞–ø–∏—à–∏ —Ç–∞–∫: /letter —Ç–µ–∫—Å—Ç")

    user = message.from_user
    async with aiosqlite.connect("students.db") as db:
        await db.execute("INSERT INTO messages (user_id, message, date, type) VALUES (?, ?, ?, ?)",
                         (user.id, text, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "letter"))
        await db.commit()

    await message.answer("‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É!")
    await bot.send_message(ADMIN_ID, f"üì® –ü–∏—Å—å–º–æ –æ—Ç @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'} ({user.id}):\n{text}")

# --- REPLY ---
@dp.message(Command("reply"))
async def reply(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /reply user_id —Ç–µ–∫—Å—Ç")

    user_id, text = int(args[1]), args[2]
    try:
        await bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@dp.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def menu_help(message: types.Message):
    await help_cmd(message)

@dp.message(F.text == "üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def menu_donate(message: types.Message):
    await donate_cmd(message)

@dp.message(F.text == "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É")
async def menu_letter(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –∞–¥–º–∏–Ω—É.\n\n"
                         "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /letter —Ç–µ–∫—Å—Ç")

# --- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã ---
@dp.message(F.text)
async def forward_msg(message: types.Message):
    if message.text.startswith("/"):
        return

    user = message.from_user
    async with aiosqlite.connect("students.db") as db:
        await db.execute("""
        INSERT OR REPLACE INTO students (user_id, username, first_name, last_name, language_code, is_premium)
        VALUES (?, ?, ?, ?, ?, ?)
        """, (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            user.language_code,
            1 if getattr(user, "is_premium", False) else 0
        ))
        await db.execute("INSERT INTO messages (user_id, message, date, type) VALUES (?, ?, ?, ?)",
                         (user.id, message.text, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "message"))
        await db.commit()

    await bot.send_message(
        ADMIN_ID,
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'} ({user.id}):\n{message.text}"
    )

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
